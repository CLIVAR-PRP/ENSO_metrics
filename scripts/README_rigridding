The user can now specify the regridding when computing the metric collection
To do that the user must provide another dictionary when calling 'ComputeCollection'
e.g. ComputeCollection(metric_collection_name, dictionary_of_datasets, user_regridding=dictionary_of_regridding)

This dictionary (i.e. dictionary_of_regridding) must contain either:
    - a dictionary (specifying the regridding) for each metric
      e.g. dictionary_of_regridding = {'metric1': dictionary_of_regridding_for_metric1,
                                       'metric2': dictionary_of_regridding_for_metric2,
                                       ...}
    - a dictionary common for all metric
     e.g. dictionary_of_regridding = {'regridding': dictionary_of_regridding_for_all_metric}

The second level dictionary (i.e. dictionary_of_regridding_for_metric1 or dictionary_of_regridding_for_all_metric) has
several possible keywords:
    'model_orand_obs': integer
        0 if you want to regrid model data toward observations data
        1 if you want to regrid observations data toward model data
        2 if you want to regrid model AND observations data toward 'newgrid'
    'regridder': string
        'adamsregrid' to use adamsregrid
        'cdms' to use the cdms2.avariable regridder
        'cdmsHorizontal' to use regrid2.horizontal.Horizontal (I think it is the same as using 'cdms' with 'regridTool'
            set to 'regrid2')
    'regridTool': string
        only if regrider is set to 'cdms'
        'regrid2', 'esmf', 'libcf'
    'regridMethod': string
        if 'regridder' set to 'adamsregrid' -> 'linear', 'linearLog', 'cubic', 'cubicLog'
        if 'regridder' set to 'cdms'
            if 'regridTool' set to 'regrid2' -> 'linear'
            if 'regridTool' set to 'esmf'    -> 'conserve', 'linear', 'patch'
            if 'regridTool' set to 'libcf'   -> 'linear'
    'newgrid': cdms2 grid
        destination grid
    'newgrid_name': string
        used to generate 'newgrid' (if no 'newgrid' is given) depending on the given string (using cdms2)
        newgrid_name must contain a name of a grid type:
            'equalarea', 'gaussian', 'generic', 'uniform'
        and a name of a grid resolution:
            '0.25x0.25deg', '0.5x0.5deg', '1x1deg', '2x2deg'

    if 'regridder' set to 'cdms' the user can specify other keywords (that are usually left to their default value):
        'missing':
            missing missing values
            default is None
        'order': string
            order axis order (e.g. 'txy')
            default is None
        'mask': cdms2 mask
            mask grid/data mask
            default is None

for now only regridder='cdms' and regridTool='esmf' can be used to regrid TransientCurveGrid like the NEMO grid


example 1: regridding the model toward the obs using cdms esmf conserve
dictionary_of_regridding = {
    'regridding': {'model_orand_obs': 0, 'regridder': 'cdms', 'regridTool': 'esmf', 'regridMethod':'conserve'}
}

example 2: regridding the obs toward the model using cdms esmf conserve
dictionary_of_regridding = {
    'regridding': {'model_orand_obs': 1, 'regridder': 'cdms', 'regridTool': 'esmf', 'regridMethod':'conserve'}
}

example 3: regridding the model and obs toward a given grid using cdms esmf conserve
dictionary_of_regridding = {
    'regridding': {'model_orand_obs': 2, 'regridder': 'cdms', 'regridTool': 'esmf', 'regridMethod':'conserve'
                   'newgrid': some_sst_tab.getGrid()}
}

example 4: regridding the model and obs toward a generic 1x1deg grid (generated by cdms2) using cdms esmf conserve
dictionary_of_regridding = {
    'regridding': {'model_orand_obs': 2, 'regridder': 'cdms', 'regridTool': 'esmf', 'regridMethod':'conserve'
                   'newgrid_name': 'generic 1x1deg'}
}
